{"version":3,"file":"app~7bd12dde.bundle.js","mappings":";0YACA,svNAIA,IACEA,EAGEC,EAAAA,EAAAA,cAFFC,EAEED,EAAAA,EAAAA,iBADFE,EACEF,EAAAA,EAAAA,kBAEEG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QAAO,SAACC,GACNA,EAASC,kBAAkBL,EAAmB,CAC5CM,QAAS,MAEb,IA6BF,QA1B8B,CACtBC,cAAa,SAACC,GAAI,oGACjBA,EAAI,CAAF,gEAIOP,EAAS,uCAAEQ,IAAIT,EAAmBQ,IAAE,0CAL5B,EAMxB,EAEME,iBAAgB,WAAG,iHACTT,EAAS,uCAAEU,OAAOX,IAAiB,0CAD1B,EAEzB,EAEMY,cAAa,SAACC,GAAY,oGACzBA,EAAWC,eAAe,MAAO,CAAF,gEAItBb,EAAS,uCAAEc,IAAIf,EAAmBa,IAAU,0CAL5B,EAMhC,EAEMG,iBAAgB,SAACR,GAAI,iHACXP,EAAS,8CAASD,EAAmBQ,IAAE,0CAD5B,EAE3B,+CClCF,QANqB,CACnBS,YAAa,GAAF,OAAKnB,EAAAA,EAAAA,SAAe,QAC/BoB,OAAQ,SAACV,GAAE,gBAAQV,EAAAA,EAAAA,SAAe,kBAAUU,EAAE,EAC9CW,WAAY,GAAF,OAAKrB,EAAAA,EAAAA,SAAe,8PCJhC,45NA0BA,QAzBsB,yBADtB,4FACsB,SADtB,QAWG,EALA,EALmB,EAsBnB,OAvBH,EACsB,OADtB,EACsB,4CACpB,sGACyBsB,MAAMC,EAAAA,aAAyB,OAAxC,OAARC,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaC,aAAW,2CAChC,0FAED,WAA8BjB,GAAE,uFACPY,MAAMC,EAAAA,OAAoBb,IAAI,OAAvC,OAARc,EAAW,EAAH,uBACPA,EAASC,QAAM,2CACvB,qFAED,WAAwBG,GAAI,yEAOzB,OANKC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,IACtB,SACsBN,MAAMC,EAAAA,WAAyBM,GAAQ,OAAhD,OAARL,EAAW,EAAH,uBACPA,EAASC,QAAM,2CACvB,+CAvBH,6DAuBG,EAtBmB,mCCQtB,QAVe,CACbU,SAAU,uCACVC,eAAgB,qDAChBC,iBAAkB,QAClBC,YAAY,IAAIC,MAAOC,cACvBzC,cAAe,wBACfE,iBAAkB,EAClBC,kBAAmB,qFCCfuC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQC,SAASC,cAAc,oBAC/BC,OAAQF,SAASC,cAAc,qBAC/BE,QAASH,SAASC,cAAc,kBAGlCG,OAAOC,iBAAiB,cAAc,WACpCR,EAAIS,YACN,IAEAF,OAAOC,iBAAiB,QAAQ,WAC9BR,EAAIS,cACJC,EAAAA,EAAAA,IACF","sources":["webpack://restaurant-apps/./src/scripts/data/favorite-resto-idb.js","webpack://restaurant-apps/./src/scripts/globals/api-endpoint.js","webpack://restaurant-apps/./src/scripts/data/restaurantdb-source.js","webpack://restaurant-apps/./src/scripts/globals/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["/* eslint-disable consistent-return */\r\n/* eslint-disable no-prototype-builtins */\r\nimport { openDB } from 'idb';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst {\r\n  DATABASE_NAME,\r\n  DATABASE_VERSION,\r\n  OBJECT_STORE_NAME,\r\n} = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, {\r\n      keyPath: 'id',\r\n    });\r\n  },\r\n});\r\n\r\nconst FavoriteRestaurantIdb = {\r\n  async getRestaurant(id) {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n  },\r\n\r\n  async getAllRestaurant() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n  },\r\n\r\n  async putRestaurant(restaurant) {\r\n    if (!restaurant.hasOwnProperty('id')) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\r\n  },\r\n\r\n  async deleteRestaurant(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n  },\r\n};\r\n\r\nexport default FavoriteRestaurantIdb;\r\n","import CONFIG from './config';\r\n\r\nconst API_ENDPOINT = {\r\n  RESTAURANTS: `${CONFIG.BASE_URL}list`,\r\n  DETAIL: (id) => `${CONFIG.BASE_URL}detail/${id}`,\r\n  ADD_REVIEW: `${CONFIG.BASE_URL}review`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import API_ENDPOINT from '../globals/api-endpoint';\r\n\r\nclass RestaurantSource {\r\n  static async restaurantList() {\r\n    const response = await fetch(API_ENDPOINT.RESTAURANTS);\r\n    const responseJSON = await response.json();\r\n    return responseJSON.restaurants;\r\n  }\r\n\r\n  static async restaurantDetail(id) {\r\n    const response = await fetch(API_ENDPOINT.DETAIL(id));\r\n    return response.json();\r\n  }\r\n\r\n  static async postReview(data) {\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    };\r\n    const response = await fetch(API_ENDPOINT.ADD_REVIEW, options);\r\n    return response.json();\r\n  }\r\n}\r\n\r\nexport default RestaurantSource;\r\n","const CONFIG = {\r\n  BASE_URL: 'https://restaurant-api.dicoding.dev/',\r\n  BASE_IMAGE_URL: 'https://restaurant-api.dicoding.dev/images/medium/',\r\n  DEFAULT_LANGUAGE: 'en-us',\r\n  CACHE_NAME: new Date().toISOString(),\r\n  DATABASE_NAME: 'wr.Katineung-database',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'restaurants',\r\n};\r\n\r\nexport default CONFIG;\r\n","import 'regenerator-runtime';\nimport '../styles/main.css';\nimport '../styles/responsive.css';\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\nimport App from './views/app';\nimport swRegister from './utils/sw-register';\n\nconst app = new App({\n  button: document.querySelector('#hamburgerButton'),\n  drawer: document.querySelector('#navigationDrawer'),\n  content: document.querySelector('#mainContent'),\n});\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n  app.renderPage();\n  swRegister();\n});\n"],"names":["DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","id","get","getAllRestaurant","getAll","putRestaurant","restaurant","hasOwnProperty","put","deleteRestaurant","RESTAURANTS","DETAIL","ADD_REVIEW","fetch","API_ENDPOINT","response","json","responseJSON","restaurants","data","options","method","headers","body","JSON","stringify","BASE_URL","BASE_IMAGE_URL","DEFAULT_LANGUAGE","CACHE_NAME","Date","toISOString","app","App","button","document","querySelector","drawer","content","window","addEventListener","renderPage","swRegister"],"sourceRoot":""}